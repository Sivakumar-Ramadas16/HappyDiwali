package com.example.rndmsnew

import android.content.Intent
import android.os.Bundle
import android.support.design.widget.Snackbar
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager
import android.support.v7.widget.RecyclerView
import android.util.Log
import android.view.Menu
import android.view.MenuItem
import android.view.View
import com.example.rndmsnew.Adapter.ThoughtAdapter
import com.example.rndmsnew.Model.Thought
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.firestore.ListenerRegistration
import kotlinx.android.synthetic.main.activity_add_thought.*

import kotlinx.android.synthetic.main.activity_main.*
import kotlinx.android.synthetic.main.content_main.*
import java.lang.Exception
import java.util.*

class MainActivity : AppCompatActivity() {

    lateinit var selectedCategory: String
    lateinit var thoughtAdapter: ThoughtAdapter
    val thoughtCollectionRef = FirebaseFirestore.getInstance().collection(THOUGHT_REF)
    //  val thoughts = ArrayList<Thought>()
    val thoughts = arrayListOf<Thought>()  // ArrayList & arrayListOf is working fine
  


    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        setSupportActionBar(toolbar)
        thoughtAdapter = ThoughtAdapter(thoughts)
        RecyclerViewThoughts.adapter = thoughtAdapter
        //val layoutManager = LinearLayoutManager(this)
        RecyclerViewThoughts.layoutManager = LinearLayoutManager(this)  // It saved above line
//        getDataFromFirebase()
    }

    override fun onResume() {
        getDataFromFirebase()
        super.onResume()
    }


 

    fun getDataFromFirebase() {
        thoughtCollectionRef.get()
            .addOnSuccessListener { snapshot ->

                thoughts.clear()
                for (docs in snapshot.documents) {

                    val myData = docs.data
                    //    val category = myData?.get(CATEGORY) as String
                    val username = myData?.get(USERNAME) as String
                    val timestamp = myData?.get(TIMESTAMP) as Date  // Did
                    val thought = myData?.get(THOUGHT_TEXT) as String
                    val numLikes = myData?.get(NUM_LIKES) as Long
                    val numComments = myData?.get(NUM_COMMENTS) as Long
                    val docId = docs.id
                    val newThought = Thought(
                        username, timestamp, thought, numLikes.toInt(),
                        numComments.toInt(), docId
                    )
                    thoughts.add(newThought)
                }
                thoughtAdapter.notifyDataSetChanged()
            }
            .addOnFailureListener { Exception ->
                Log.e("SivaException", "Not able to fetch the Result ${Exception}")
            }
    }
    fun FabButtonClicked(view: View) {
        val intent = Intent(this, AddThoughtActivity::class.java)
        startActivity(intent)

    }

    fun MainFunnyClicked(view: View) {

        selectedCategory = FUNNY
        MainSerious.isChecked = false
        MainCrazy.isChecked = false
        MainPopular.isChecked = false
        if (selectedCategory == FUNNY) {
            MainFunny.isChecked = true
            return
        }


    }

    fun MainSeriousClicked(view: View) {

        selectedCategory = SERIOUS
        MainPopular.isChecked = false
        MainCrazy.isChecked = false
        MainFunny.isChecked = false
        if (selectedCategory == SERIOUS) {
            MainSerious.isChecked = true
            return
        }


    }

    fun MainCrazyClicked(view: View) {
        selectedCategory = CRAZY
        MainSerious.isChecked = false
        MainFunny.isChecked = false
        MainPopular.isChecked = false
        if (selectedCategory == CRAZY) {
            MainCrazy.isChecked = true
            return
        }


    }

    fun MainPopularClicked(view: View) {

        selectedCategory = POPULAR
        MainSerious.isChecked = false
        MainCrazy.isChecked = false
        MainFunny.isChecked = false
        if (selectedCategory == POPULAR) {
            MainPopular.isChecked = true
            return
        }

    }
}


